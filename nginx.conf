#user  root;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    server_tokens   off;
    #tcp_nopush     on;

    keepalive_timeout  120s 120s;
    keepalive_requests 10000;

    gzip  on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;


    
    #设置缓存参数
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 300m;
    tcp_nopush      on;
    proxy_redirect off;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_connect_timeout 90;
    proxy_send_timeout 90;
    proxy_read_timeout 90;
    proxy_buffer_size 16k;
    proxy_buffers 8 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;
    #设置缓存存储路径、存储方式、分配内存大小、磁盘最大空间、缓存期限
    #此文件夹需要创建，mkdir -p /var/cache/nginx/proxy_cache
    #proxy_cache_path /var/cache/nginx/proxy_cache levels=1:2 keys_zone=http-cache:500m max_size=10g inactive=30d;
    proxy_cache_path /var/cache/nginx/proxy_cache levels=1:2 keys_zone=http-cache:500m max_size=10g;
    proxy_temp_path /var/cache/nginx/proxy_cache/tmp;	
    

    #设置group1的服务器
    upstream fdfs_group1 {
        fair;
        server 0.0.0.0:8089 weight=1 max_fails=2 fail_timeout=30s;
        # server 192.168.1.149:8080 weight=1 max_fails=2 fail_timeout=30s;
    }	


    # 客户端
    server {
        listen       8000;
        server_name  localhost;
	proxy_http_version 1.1;	
	#rewrite ^(.*)$ https://$host$1 permanent;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;


        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' '*';
        add_header 'Access-Control-Allow-Header' 'Content-Type,*';
	
        root /home/mhb/src/nas_front/dist/;
	try_files $uri $uri/ /index.html;
        index index.html index.htm index.nginx-debian.html;

        #server_name _;
        
        ssl_certificate         "/opt/ssl-cert/server.crt";
        ssl_certificate_key             "/opt/ssl-cert/server.key";

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;



        location / {
		root /home/mhb/src/nas_front/dist/;
        	try_files $uri $uri/ /index.html;
		#proxy_pass wss://localhost:5066/; # 服务器地址
                proxy_http_version 1.1; # webscoket连接代理服务器必须使用http 1.1版本，默认
                proxy_set_header Upgrade $http_upgrade; # 连接升级
                proxy_set_header Connection ""; # 要求客户端连接协议升级
		proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;

                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Methods' '*';
                add_header 'Access-Control-Allow-Header' 'Content-Type,*';

                # OPTIONS 请求的响应，通常用于 CORS 预检请求
                if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Allow-Origin' '*';
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                        add_header 'Access-Control-Max-Age' 1728000;
                        add_header 'Content-Type' 'text/plain; charset=utf-8';
                        add_header 'Content-Length' 0;
                        return 204;
                }

        }

        location /api {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                add_header Referrer-Policy "no-referrer";
                proxy_set_header Host $host;
                proxy_pass http://localhost:9000/;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Proto $scheme;
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Methods' '*';
                add_header 'Access-Control-Allow-Header' 'Content-Type,*';
        }


	location /websocket {
    		proxy_pass http://localhost:9000/; # websocket服务器。不用管 ws://
    		proxy_http_version 1.1; # http协议切换 
    		proxy_set_header Host $host; # 保留源信息
    		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    		proxy_set_header Upgrade $http_upgrade; 
    		proxy_set_header Connection 'upgrade';
	}		


    	# websocket代理
    	#location /websocket {  
        	#proxy_pass wss://localhost:5066/; # 服务器地址
        	#proxy_http_version 1.1; # webscoket连接代理服务器必须使用http 1.1版本，默认
        	#proxy_set_header Upgrade $http_upgrade; # 连接升级
        	#proxy_set_header Connection "Upgrade"; # 要求客户端连接协议升级
        	#proxy_set_header X-Real-IP $remote_addr;
    	#}

	#location /group1/M00 {
        #    proxy_next_upstream http_502 http_504 error timeout invalid_header;
        #    proxy_cache http-cache;
        #    proxy_cache_valid  200 304 12h;
        #    proxy_cache_key $uri$is_args$args;
        #    proxy_pass http://fdfs_group1;
        #    expires 30d;
        #}
        
	
	#设置清除缓存的访问权限
        #location ~ /purge(/.*) {
        #    allow 127.0.0.1;
        #    allow 172.16.1.0/24;
        #    deny all;
        #    proxy_cache_purge http-cache  $1$is_args$args;
        #} 

	
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    server {
        listen 8080;
        listen [::]:8080;
	server_name localhost;

	ssl_certificate         "/opt/ssl-cert/server.crt";
        ssl_certificate_key             "/opt/ssl-cert/server.key";

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  10m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  off;


	location /group1/M00 {
            proxy_next_upstream http_502 http_504 error timeout invalid_header;
            proxy_cache http-cache;
            proxy_cache_valid  200 304 12h;
            proxy_cache_key $uri$is_args$args;
            proxy_pass http://fdfs_group1;
            # expires 30d;
        }

        #设置清除缓存的访问权限
        location ~ /purge(/.*) {
            allow 127.0.0.1;
            allow 172.16.1.0/24;
            deny all;
            proxy_cache_purge http-cache  $1$is_args$args;
        }
 
    }
   
    server {
        listen 8089;
        listen [::]:8089;
	server_name localhost;

	location / {
		root 	html;
		index 	index.html index.htm;
 	}

	location ~/group1/M00 {
        	root /home/mhb/src/fastdfs/fastdfs-5.11/storage_data/data;
		#root /fdfs/storage/data;
		ngx_fastdfs_module;
	}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    server {
        listen       8082;
        listen       [::]:8082;
        server_name  localhost;

        location / {
            root   /home/mhb/files/music/;
	    try_files $uri $uri/ /index.html;
            index  index.html index.htm;
        }
    }


    #  HTTPS server
    
    server {
        listen       8443 ssl;
	listen	     [::]:443 ssl;
        #server_name  nas_front.com www.nas_front.com;
	#ssl on;

        #ssl_certificate         "/opt/ssl-cert/server.crt";
        #ssl_certificate_key             "/opt/ssl-cert/server.key";
	
	ssl_certificate		"/home/mhb/Desktop/ssl.ca-0.1/server.crt";	
	ssl_certificate_key	"/home/mhb/Desktop/ssl.ca-0.1/server.key";

	ssl_protocols TLSv1.2 TLSv1.3;	
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers  on;

        
	location / {
            root   html;
            index  index.html index.htm;
        }
    }

    #server {
   # 	listen 80;
  # 	server_name nas_front.com www.nas_front.com; #多个域名用空格分开
    	#将请求转成https
   #	rewrite ^(.*)$ https://$host$1 permanent;
#	location / {
#            root   html;
 #           index  index.html index.htm;
  #      }
  #  }

}
